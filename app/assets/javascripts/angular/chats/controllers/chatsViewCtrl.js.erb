var chatsModule = angular.module('chatsModule');

chatsModule.factory('jsonMethods', function($http){
	return {
		makeJson: function(msg, nickname) {
			var chat_user_id = parseInt(user_id);
			var chat_id = parseInt(chat_id)
			
			messageObject = {
				"message": {
					"chat_id": chat_id,
					"channel": channel,
					"user": {
						"id" : chat_user_id,
						"nickname" : nickname
					},
					"text": msg
				}
			};
			return messageObject;
		},
		
		postDoc: function(json) {
			vaultID = '<%= ENV['TV_A_VAULT_ID'] %>'
			apiKey = '<%= ENV['TV_API_KEY'] %>'
			console.log(JSON.stringify(json));
			var promise = $http({
				method: 'POST', 
				headers: { 'Authorization' : 'Basic ' + btoa(apiKey + ":") },
				url: 'https://api.truevault.com/v1/vaults/' + vaultID + '/documents',
				data: { document : btoa(JSON.stringify(json)) }
			}).then(function(response){
				return response.data;
		  },
			function(response) {
				// if error?
				console.log(response)
			});
			return promise;
		}
		
	}
});

chatsModule.factory('chatMethods', function($http, $timeout){
	return {
		getDocByID: function(id) {
			vaultID = '<%= ENV['TV_A_VAULT_ID'] %>'
			apiKey = '<%= ENV['TV_API_KEY'] %>'
			var promise = $http({
				method: 'GET',
				headers: { 'Authorization' : 'Basic ' + btoa(apiKey + ":") },
				url: 'https://api.truevault.com/v1/vaults/' + vaultID + '/documents/' + id
			}).then(function(response){
				return response.data;
		  },
			function(response) {
				// if error?
				console.log(response);
			});
			return promise;
		},
		
		triggerSendMessage: function(message, channel, callback) {
			var triggered = channel.trigger('client-send_message', message);
			callback(false);
		},
		
		triggerTypingStatus: function(nickname, status, length, channel) {
			console.log('triggered typing status');
			payload = {
				"nickname": nickname,
				"status": status,
				"message": 'is typing...'
			}
			if (length >= 200) {
				payload.message = 'is typing a longer message...'
			}
			var triggered = channel.trigger('client-typing_status', payload);
		},
		
		appendMessage: function(scope, message, callback) {
			scope.messages.push(message);
			callback(false);
		},
		
		bindPusherEvents: function(scope){
			// Binding Pusher chat events
			scope.channel.bind('client-send_message', function(message){
				scope.messages.push(message);
		
				// Programatically create an audio element and pop the user
				var pop = new Audio('/sounds/pop.wav');
				pop.load();
				pop.play();
		
				scope.$apply();
			});
		
			scope.channel.bind('client-typing_status', function(notification){
				if(notification.status == true) {
					scope.notification = notification;
				}
				else {
					notification.message = "";
					scope.notification.status = false;
				}
				scope.$apply();
			});
	
			scope.channel.bind('presence', function(member){
				if (member.event == "member_added") {
					member.message = "joined the chatroom."
				}
				else if (member.event == "member_removed") {
					member.message = "left the chatroom."
				}
				member.status = true;
				scope.notification = member;
				scope.notification.timeout = $timeout(function(){
					scope.notification.status = false;
				}, 2000);
				scope.$apply();
			});
			
			scope.channel.bind('updated_nickname', function(member){
				scope.notification = {
					'nickname': member.old_nickname,
					'message': 'changed nickname to ' + member.nickname,
					'status': true
				};
				scope.notification.timeout = $timeout(function(){
					scope.notification.status = false;
				}, 2000);
				scope.$apply();
			});
		},
		
		updateNickname: function(nickname) {
			$http({
				method: 'POST',
				url: '/api/update_nickname',
				data: { 'chat_id': chat_id, 'user_id': user_id, 'nickname': nickname },
			}).then(function(response){
			});
		}
	
	}
});

chatsModule.factory('updateLocalTimer', function(){
	return {
		update: function(scope, millis) {
			console.log('updating local timer');
			scope.timer.startTime = millis;
			scope.timer.start();
			scope.toggleButton.text = "Stop";
		}
	}
})

chatsModule.factory('timerMethods', function($http, updateLocalTimer){
	return {
		
		bindTimerEvents: function(scope){
			scope.channel.bind('client-timer_start', function(payload){
				scope.timer.start();
				scope.$apply();
			});
			
			scope.channel.bind('client-timer_stop', function(payload){
				scope.timer.stop();
				scope.$apply();
			});
			
			scope.channel.bind('client-timer_resume', function(payload){
				scope.timer.resume();
				scope.$apply();
			});
			
			scope.channel.bind('client-timer_reset', function(payload){
				scope.timer.start();
				scope.timer.stop();
				scope.$apply();
			});
			
			scope.channel.bind('client-update_timer', function(payload){
				console.log('updating local');
				console.log(payload.millis);
				updateLocalTimer.update(scope, payload.millis);
			});
		},
		
		updateTimer: function(millis, channel){
			// Update server timer then update local timers
			var promise = $http({
				method: 'POST', 
				url: '/api/update_timer',
				data: { 'chat_id' : chat_id, 'user_id' : user_id, 'millis' : millis }
			}).then(function(response){
				console.log('about to update client timer');
				return response;
		  },
			function(response) {
				console.log(response);
			});
			return promise;
		},
		
		triggerStartTimer: function(channel, callback) {
			var triggered = channel.trigger('client-timer_start', payload);
			callback();
		},
		triggerStopTimer: function(channel, callback) {
			var triggered = channel.trigger('client-timer_stop', payload);
			callback();
		},
		triggerResumeTimer: function(channel, callback) {
			var triggered = channel.trigger('client-timer_resume', payload);
			callback();
		},
		
		triggerResetTimer: function(channel, callback) {
			var triggered = channel.trigger('client-timer_reset', payload);
			callback();
		}
	}
});

chatsModule.controller('ChatsViewCtrl', function($scope, jsonMethods, chatMethods, timerMethods, $http, $timeout, Pusher, PusherMethods) {
	$scope.current = { 
		'nickname' : user_nickname,
		'timer' : {
			'millis' : 'Hello'
		},
		'role' : {
			'type' : role_type
		},
		'message' : {
			'typing' : false,
			'text' : '',
			'sending' : false,
			'length' : ''
		}
	};
	$scope.timer = document.getElementById('timer').getElementsByTagName('timer')[0];
	console.log($scope.current.nickname);
	
	$scope.popup = { 'close' : true };
	$timeout(function(){
		$scope.popup.close = false
	}, 250);
	
	$scope.closePopup = function(){
		if ($scope.isCheckedN) {
			$scope.popup.close = true;
			chatMethods.updateNickname($scope.current.nickname);
		}
		else {
			alert('You must accept the conditions to proceed.');
		}
	}
	
	PusherMethods.setAuthEndpoint();
	$scope.pusher = PusherMethods.pusher();
	$scope.channel = PusherMethods.channel($scope.pusher);
	
	$scope.messages = [];
	$scope.notifications = [];
	$scope.checkSender = function(id){
		if (user_id == id){
			var sender = "you";
		}
		else {
			var sender = "them";
		}
		return sender;
	}
	
	// TIMER API STUFF
	
	timerMethods.bindTimerEvents($scope);
	$scope.toggleButton = {
		'text' : "Start"
	};
	
	$scope.stopResumeTimer = function() {
		var button = $scope.toggleButton
		var timer = $scope.timer
	  if (button.text === 'Start') {
			timerMethods.triggerStartTimer($scope.channel, function(){
				timer.startTime = '50000';
				timer.start();
			});
	    button.text = 'Stop';
	  }
	  else if (button.text === 'Stop') {
			timerMethods.triggerStopTimer($scope.channel, function(){
				timer.stop();
			});
	    button.text = 'Resume';
	  }
	  else {
			timerMethods.triggerResumeTimer($scope.channel, function(){
				timer.resume();
			});
	    button.text = 'Stop';
	  }
	}
	
	$scope.resetTimer = function() {
		var button = $scope.toggleButton;
		var timer = $scope.timer;
		timerMethods.triggerResetTimer($scope.channel, function(){
			// callback after timer updates client side
			timer.start();
			timer.stop();
			button.text = 'Start';
		})
	}
	
	if ($scope.current.role.type === "Therapist") {
		$scope.$on('timer-tick', function(event, args){
			args.seconds = Math.floor((args.millis / 1000) % 60);
			args.minutes = Math.floor((args.millis / 60000));
			
			$scope.current.timer = {
				'millis': args.millis,
				'seconds': args.seconds,
				'minutes': args.minutes
			};

			/*
			$scope.$watch('args.minutes', function(){
				// update timers, only run if therapist. only one server call can happen.
				console.log('scope current role type is ' + $scope.current.role.type)
				timerMethods.updateTimer(args.millis, $scope.channel).then(function(promise){
					$scope.channel.trigger('client-update_timer', promise);
				});
			});
			*/
		
		});
	}
	
	// PUSHER API STUFF
	
	chatMethods.bindPusherEvents($scope);
	
	$scope.$watch('current.message.text', function(){
		var nickname = $scope.current.nickname;
		var channel = $scope.channel;
		var msgLength = ($scope.current.message.text + '').length;
		if (msgLength >= 1) {
			$scope.current.message.typing = true;
		}
		if (msgLength < 200) {
			$scope.current.message.type = 'short';
		}
		if (msgLength >= 200) {
			$scope.current.message.type = 'long';
		}
		else if (msgLength === 0) {
			$scope.current.message.typing = false;
			$scope.current.message.type = 'none';
		}
	});
	
	$scope.$watch('current.message.type', function(){
		console.log('type changed, triggering status');
		var msgLength = ($scope.current.message.text + '').length;
		var channel = $scope.channel;
		chatMethods.triggerTypingStatus($scope.current.nickname, $scope.current.message.typing, msgLength, channel);
	});

	$scope.postMessage = function(){
		$scope.current.message.sending = true;
		var msg = $scope.current.message.text
		if(msg == null || msg == "") {
			alert('Please enter a message...');
		}
		else {
			var json = jsonMethods.makeJson(msg, $scope.current.nickname);
			jsonMethods.postDoc(json).
			then(function(promise){
				console.log('promise is ' + JSON.stringify(promise));
				var id = promise.document_id;
				return chatMethods.getDocByID(id);
			}).
			then(function(promise){
				decoded = JSON.parse(atob(promise));
				message = decoded.message;
				chatMethods.triggerSendMessage(message, $scope.channel, function(bool){
					$scope.current.message.sending = bool;
				});
				chatMethods.appendMessage($scope, message, function(bool){
					$scope.current.message.sending = bool;
					$scope.current.message.text = "";
				});
			});
		}
	}
});