$(".chats.view").ready(function() {
	
	// INIT UI FUNCTIONS
	
	$('.messages-container').bind("scroll mousedown DOMMouseScroll mousewheel keyup", function(e){
    if ( e.which > 0 || e.type === "mousedown" || e.type === "mousewheel"){
      $('.messages-container').stop().unbind('scroll mousedown DOMMouseScroll mousewheel keyup'); // This identifies the scroll as a user action, stops the animation, then unbinds the event straight after (optional)
    }
	});   
	
	//UI STUFF
	
	disableTwilioButtons('.twilio-button');
	getSizesAndResize();
	scrollToBottomOfAndFocusOn('.messages-container', '#message');
	
	$(window).resize(function() {
		getSizesAndResize();
	})
	
	$('.timer-start-button').click(function(){
		var time = $('.timer div').data("time");
		var state = "notstarted"
		$.ajax({
			url: '/api/start_timer',
			type: 'POST',
			data: { "chat_id": chat_id, "time": time },
			success: function(data) {
			}
		});
	});
	
	$('.timer-toggle-button').click(function(){
		var time = $('.timer div').data("time");
		timer = $('.timer');
		var state = getTimerState(timer);
		$.ajax({
			url: '/api/toggle_timer',
			type: 'POST',
			data: { "chat_id": chat_id, "time": time, "state": state },
			success: function(data) {
			}
		});
	});
	
	$('.timer-reset-button').click(function(){
		$.ajax({
			url: '/api/reset_timer',
			type: 'POST',
			data: { "chat_id": chat_id },
			success: function(data) {
			}
		});
	})
	
	$('.helplines-button').click(function() {
		helplinesCard = $('#helplines-card')
		if (helplinesCard.hasClass('opened')) {
			closeSidebarCard(helplinesCard);
		}
		else if (helplinesCard.hasClass('closed')) {
			openSidebarCard(helplinesCard);
		}
	});
	
	$('.chat-panel').click(function() {
		if ($('.sidebar-card').hasClass('opened')) {
			closeSidebarCard($('.sidebar-card'));
		}
	});
	
	$.ajaxSetup({
	  beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))}
	});
	
	//hide footer
	$('#footer').css('display', 'none');
	
	var audio = document.createElement("audio");
	var audio_types = ["ogg", "mpeg", "wav"];
	// Loop through the types I have and break out when the browser says it might be able to play one
	if (typeof audio.canPlayType == 'function') {
  	for(type in audio_types) {
  		var type_name = audio_types[type];
  		if(audio.canPlayType("audio/" + type_name) == "yes" || audio.canPlayType("audio/" + type_name) == "maybe") {
  			browser_audio_type = type_name;
  			break;
  		}
  	}
	}

	// Logging - Disable in production
	// Pusher.log = function() { if (window.console) window.console.log.apply(window.console, arguments); };
	
	Pusher.channel_auth_endpoint = '/api/authenticate?user_id=' + user_id;
	var socket = new Pusher(PUSHER_KEY, {
		encrypted: true
	});
	
	// Global variable "channel" is set in the view
	var presenceChannel = socket.subscribe('presence-' + channel);
	
	presenceChannel.bind('start_timer', function(member){
		startTimer(member.time);
	});
	
	presenceChannel.bind('toggle_timer', function(member){
		toggleTimer(member.time, member.state);
	});
	
	presenceChannel.bind('get_timer', function(member){
		startTimer(member.time, member.state);
		pauseTimer();
	});
	
	presenceChannel.bind('reset_timer', function(member){
		resetTimer();
	});
	
	presenceChannel.bind('presence', function(member){
		if (member.event == "member_added") {
			if(member.user_id == user_id) {
			}
			else {
				$('.messages-container').append('<div class="note"><strong>' + member.nickname + '</strong> entered the chatroom.</div>');
			}
		}
		else if (member.event == "member_removed") {
			if(member.user_id == user_id) {
			}
			else {
				$('.messages-container').append('<div class="note"><strong>' + member.nickname + '</strong> left the chatroom.</div>');
			}
		}
	});
	
	// When somebody updates their nickname, tell all the people including yourself
	presenceChannel.bind('updated_nickname', function(member) {
		scrollToTheBottomUnlessScrolled($('#messages'));
		if(member.user_id == user_id) {
			$('.messages-container').append('<div class="note">You have updated your nickname to <strong>' + member.nickname + '</strong>.</div>');
		}
		else {
			$('.messages-container').append('<div class="note"><strong>' + member.old_nickname + '</strong> updated their nickname to <strong>' + member.nickname + '</strong>.</div>');
		}
	});

	// Deal with incoming messages!
	presenceChannel.bind('send_message', function(message) {
		$("#spinner").hide();
		var who = '';
		
		if(user_id == message.user.id) {
			who = 'you';
			$('#message-overlay').fadeOut(150);
		} 
		
		else {
			scrollToTheBottomUnlessScrolled($('#messages'));
			who = 'them';
			// If they have a typing message, hide it!
			$('#chat-notification #is_typing_' + message.user.id).hide();
			
			// Do some alerting of the user
			if(!hasFocus) {
				// TODO: Update the page title
				document.title = "New Message! - Plain White Couch"
			}
		}
		
		// Programatically create an audio element and pop the user
		var pop = new Audio('/sounds/pop.wav');
		pop.load();
		pop.play();
		
		var header = getMessageHeader(message.user.nickname, who);
		$('.messages-container').append(
													'<div class="message-container">' +
														'<li class="' + who + ' just_added_id_' + message.id + '" style="display:none;">' + header +
																'<div class="message-wrapper"><div class="message">' + 
																'<p>' + replaceURLWithHTMLLinks(message.message) + '</p>' +
																'</div></div></li></div>');
													
		$('.messages-container li.just_added_id_' + message.id).fadeIn();
	});
	
	// Typing Messages
	presenceChannel.bind('typing_status', function(notification) {
		if(notification.user.id == user_id) return false;
		if(notification.status == "true") {
			$('#chat-notification').html('<div id="is_typing_'+ notification.user.id +'"><strong>' + notification.user.nickname + '</strong> is typing...</div>');
			scrollToTheBottomUnlessScrolled($('#messages'));
		} 
		else {
			$('#chat-notification #is_typing_' + notification.user.id).remove();
		}
	});
	
	// Now pusher is all setup lets let the user go wild!
	$('#loading').fadeOut();
	$('#message').removeAttr("disabled");
	
	// Enter key to send message
	$('#message').keydown(function(e) {
		if (e.keyCode == 13) { 
			scrollToTheBottomUnlessScrolled($('#messages'));
			send_message(); 
			return false; 
		}
	});

	// Typing Notifications
	// "is_currently_typing" is defined at the top of this file
	var timout_function = function() {
		is_typing_currently = false;
		typing_status(false);
	}
	var typing_end_timeout;
	$('#message').keyup(function()
	{
		// Clear the timeout to stop annoying notifications coming every time you clear the field
		clearTimeout(typing_end_timeout);
		if($(this).val() == '' && is_typing_currently) {
			// Has stopped typing by clearing the field
			typing_end_timeout = setTimeout(timout_function, 1500);
		} else {
			// If your not currently typing then send the notification
			if(!is_typing_currently) { 
				is_typing_currently = true; 
				typing_status(true); 
			}
		}
	});
	
	var old_nickname = "";
	$('#editNickname').click(function()
	{
		$('#title').fadeOut(200);
		$('#nickname').fadeIn(200);
		$('#changeNickname').fadeIn(200);
		$(this).hide();
		old_nickname = $('#nickname').val();
		return false;
	});

	$('.change-nickname-button').click(function() {
		//$('#nickname').attr("disabled", "disabled");
		changeNickname();
	});
	
	$('#nickname').keydown(function(e)
	{
		if (e.keyCode == 13) { changeNickname(); }
	});
	
	var changeNickname = function() {
		if($('#nickname').val() != old_nickname) {
			$("#spinner").show();
			
			$.post('/api/update_nickname/', { 'chat_id': chat_id, 'user_id': user_id, 'nickname': $('#nickname').val() }, function(response) {
				if(response != "SAVED") {
					alert("There was an error updating your nickname, please try again.");
				}
				$('#editNickname').fadeIn(200);
				$('#title').fadeIn(200);
				onSuccess: {
					$("#spinner").hide();
				}
			});
		} else {
			$('#nickname').hide();
			$('#title').fadeIn(200);
			$('#changeNickname').hide();
		}
		
		return false;
	}
	
	getServerTimer();
	
	// Cross browser placeholder shiz
	var text = 'Type your message here and hit enter...';
	$('#message').focus(function() {
		if($(this).val() == text) { $(this).val(""); }
	}).blur(function() {
		if($(this).val() == "") { $(this).val(text); }
	});
});

//////////////////////////////////////////////////
////////////////// Define Vars; //////////////////
//////////////////////////////////////////////////

var is_typing_currently = false;
var browser_audio_type = "";